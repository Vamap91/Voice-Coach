import os
import io
import time
import json
import streamlit as st
from datetime import datetime
from gtts import gTTS
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Tuple

# Configura√ß√£o da p√°gina com layout otimizado
st.set_page_config(
    page_title="Voice Coach Pro - Carglass", 
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="collapsed"  # Sidebar colapsada para mais espa√ßo
)

# CSS responsivo e profissional
st.markdown("""
<style>
    /* Container principal */
    .stApp {
        background: linear-gradient(to bottom, #f0f2f6, #ffffff);
    }
    
    /* Header */
    .main-header {
        background: linear-gradient(135deg, #004a8f, #0066cc);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    /* Container de chat otimizado */
    .chat-container {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        height: 500px;
        overflow-y: auto;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        scroll-behavior: smooth;
    }
    
    /* Mensagens */
    .message {
        margin: 0.75rem 0;
        padding: 0.75rem 1rem;
        border-radius: 10px;
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .customer-message {
        background: linear-gradient(135deg, #fff3cd, #ffe8a1);
        border-left: 3px solid #ffc107;
        margin-right: auto;
    }
    
    .agent-message {
        background: linear-gradient(135deg, #d4edda, #c3e6cb);
        border-left: 3px solid #28a745;
        margin-left: auto;
        text-align: right;
    }
    
    /* √Årea de input */
    .input-area {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        margin-top: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    /* M√©tricas */
    .metrics-container {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 3px solid #0066cc;
    }
    
    /* Status badges */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .badge-success {
        background: #d4edda;
        color: #155724;
    }
    
    .badge-warning {
        background: #fff3cd;
        color: #856404;
    }
    
    .badge-danger {
        background: #f8d7da;
        color: #721c24;
    }
    
    /* Scrollbar customizada */
    .chat-container::-webkit-scrollbar {
        width: 8px;
    }
    
    .chat-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .chat-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
    }
    
    .chat-container::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
    
    /* Timer */
    .timer-display {
        font-size: 1.25rem;
        font-weight: bold;
        color: #0066cc;
        text-align: center;
        padding: 0.5rem;
        background: #e7f3ff;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# ==================== MODELOS DE DADOS ====================

@dataclass
class CustomerData:
    """Dados do cliente para a simula√ß√£o"""
    name: str = "Jo√£o Silva"
    cpf: str = "123.456.789-10"
    phone1: str = "11-99999-8888"
    phone2: str = "11-97777-6666"
    plate: str = "ABC-1234"
    car: str = "Honda Civic 2020"
    address: str = "Rua das Flores, 123 - Vila Ol√≠mpia, S√£o Paulo/SP"
    insurance: str = "Porto Seguro"
    problem: str = "trinca no para-brisa de 15cm causada por uma pedra"

@dataclass
class ConversationMemory:
    """Mem√≥ria da conversa para evitar repeti√ß√µes"""
    provided_data: Dict[str, str] = field(default_factory=dict)
    asked_questions: List[str] = field(default_factory=list)
    repetition_count: int = 0
    patience_level: int = 100
    stage: str = "greeting"
    
    def add_provided_data(self, key: str, value: str):
        self.provided_data[key] = value
    
    def was_already_provided(self, key: str) -> bool:
        return key in self.provided_data
    
    def decrease_patience(self, amount: int = 20):
        self.patience_level = max(0, self.patience_level - amount)
        self.repetition_count += 1

# ==================== CLIENTE INTELIGENTE ====================

class SmartVirtualCustomer:
    """Cliente virtual com mem√≥ria e comportamento realista"""
    
    def __init__(self):
        self.data = CustomerData()
        self.memory = ConversationMemory()
        self.responses_given = []
        
    def analyze_agent_message(self, message: str) -> Dict:
        """Analisa a mensagem do agente para entender o que foi solicitado"""
        message_lower = message.lower()
        
        analysis = {
            'asking_name': any(w in message_lower for w in ['nome', 'quem fala', 'com quem']),
            'asking_cpf': 'cpf' in message_lower,
            'asking_phone': any(w in message_lower for w in ['telefone', 'contato', 'celular']),
            'asking_second_phone': any(w in message_lower for w in ['segundo', 'outro telefone', 'adicional']),
            'asking_plate': any(w in message_lower for w in ['placa', 've√≠culo']),
            'asking_address': any(w in message_lower for w in ['endere√ßo', 'onde mora', 'localiza√ß√£o']),
            'asking_problem': any(w in message_lower for w in ['problema', 'aconteceu', 'ocorreu', 'dano']),
            'asking_city': any(w in message_lower for w in ['cidade', 'onde realizar', 'loja']),
            'confirming': any(w in message_lower for w in ['confirma', 'correto', 'isso mesmo', 'confere']),
            'greeting': any(w in message_lower for w in ['bom dia', 'boa tarde', 'boa noite', 'ol√°']),
            'closing': any(w in message_lower for w in ['mais alguma', 'd√∫vida', 'agrade√ßo', 'obrigado']),
            'inappropriate': 'filho da puta' in message_lower or any(w in message_lower for w in ['porra', 'merda', 'caralho'])
        }
        
        return analysis
    
    def generate_response(self, agent_message: str) -> str:
        """Gera resposta inteligente baseada no contexto"""
        analysis = self.analyze_agent_message(agent_message)
        
        # Responde a conte√∫do inapropriado
        if analysis['inappropriate']:
            self.memory.decrease_patience(50)
            return "Olha, n√£o precisa falar assim. Estou tentando resolver meu problema de forma educada. Por favor, vamos manter o profissionalismo."
        
        # Se est√° saudando
        if analysis['greeting'] and self.memory.stage == "greeting":
            self.memory.stage = "data_collection"
            return f"Ol√°! Meu seguro √© {self.data.insurance} e tenho um problema no vidro do meu carro. Preciso resolver isso urgente!"
        
        # Verifica repeti√ß√µes antes de responder
        response_parts = []
        
        # Nome
        if analysis['asking_name']:
            if self.memory.was_already_provided('name'):
                self.memory.decrease_patience()
                return f"J√° falei meu nome antes, √© {self.data.name}. Voc√™s n√£o anotam as informa√ß√µes?"
            else:
                self.memory.add_provided_data('name', self.data.name)
                response_parts.append(f"Meu nome √© {self.data.name}")
        
        # CPF
        if analysis['asking_cpf']:
            if self.memory.was_already_provided('cpf'):
                self.memory.decrease_patience()
                return f"Olha, j√° informei o CPF: {self.data.cpf}. Por favor, anote dessa vez!"
            else:
                self.memory.add_provided_data('cpf', self.data.cpf)
                response_parts.append(f"Meu CPF √© {self.data.cpf}")
        
        # Telefone
        if analysis['asking_phone']:
            if analysis['asking_second_phone'] or 'segundo' in agent_message.lower():
                if self.memory.was_already_provided('phone2'):
                    self.memory.decrease_patience()
                    return "J√° passei os dois telefones! Por favor, prestem aten√ß√£o no que eu falo."
                else:
                    self.memory.add_provided_data('phone2', self.data.phone2)
                    response_parts.append(f"O segundo telefone √© {self.data.phone2}")
            else:
                if self.memory.was_already_provided('phone1'):
                    if not self.memory.was_already_provided('phone2'):
                        # Se pedir telefone de novo mas n√£o pediu o segundo ainda
                        self.memory.add_provided_data('phone2', self.data.phone2)
                        return f"J√° informei o primeiro telefone. O segundo √© {self.data.phone2}"
                    else:
                        self.memory.decrease_patience()
                        return f"J√° informei os telefones: {self.data.phone1} e {self.data.phone2}"
                else:
                    self.memory.add_provided_data('phone1', self.data.phone1)
                    response_parts.append(f"Meu telefone √© {self.data.phone1}")
        
        # Placa
        if analysis['asking_plate']:
            if self.memory.was_already_provided('plate'):
                self.memory.decrease_patience(30)
                return f"J√° falei isso antes! Placa {self.data.plate}, √© um {self.data.car}. Estou com pressa, podemos agilizar?"
            else:
                self.memory.add_provided_data('plate', self.data.plate)
                response_parts.append(f"Placa {self.data.plate}, √© um {self.data.car}")
        
        # Endere√ßo
        if analysis['asking_address']:
            if self.memory.was_already_provided('address'):
                self.memory.decrease_patience()
                return "J√° informei meu endere√ßo completo. Por favor, verifiquem suas anota√ß√µes."
            else:
                self.memory.add_provided_data('address', self.data.address)
                response_parts.append(f"Meu endere√ßo √© {self.data.address}")
        
        # Problema
        if analysis['asking_problem']:
            if self.memory.was_already_provided('problem'):
                self.memory.decrease_patience()
                return "Como j√° expliquei, tenho uma trinca no para-brisa. Foi ontem na estrada."
            else:
                self.memory.add_provided_data('problem', self.data.problem)
                response_parts.append(f"Tenho uma {self.data.problem}. Aconteceu ontem quando estava na estrada")
        
        # Cidade/Loja
        if analysis['asking_city']:
            response_parts.append("Prefiro fazer o servi√ßo em S√£o Paulo, na loja mais pr√≥xima da Vila Ol√≠mpia")
        
        # Confirma√ß√µes
        if analysis['confirming']:
            if self.memory.patience_level > 70:
                return "Sim, est√° correto. Pode prosseguir."
            else:
                return "Isso mesmo. Vamos agilizar, por favor?"
        
        # Encerramento
        if analysis['closing']:
            return "N√£o, est√° tudo esclarecido. Obrigado pelo atendimento!"
        
        # Monta resposta composta
        if response_parts:
            return ". ".join(response_parts) + "."
        
        # Resposta padr√£o baseada na paci√™ncia
        if self.memory.patience_level < 30:
            return "Estou com pressa, podemos agilizar? J√° passei todas as informa√ß√µes necess√°rias."
        elif self.memory.repetition_count > 2:
            return "Olha, voc√™s precisam prestar mais aten√ß√£o. J√° repeti v√°rias informa√ß√µes."
        else:
            return "Certo, qual a pr√≥xima informa√ß√£o que precisa?"

# ==================== AVALIADOR INTELIGENTE ====================

class IntelligentEvaluator:
    """Sistema de avalia√ß√£o baseado no protocolo Carglass"""
    
    def __init__(self):
        self.criteria = {
            'greeting': {'weight': 10, 'score': 0, 'keywords': ['bom dia', 'boa tarde', 'carglass', 'meu nome']},
            'data_collection': {'weight': 6, 'score': 0, 'keywords': ['nome', 'cpf', 'telefone', 'placa', 'endere√ßo']},
            'lgpd': {'weight': 2, 'score': 0, 'keywords': ['lgpd', 'prote√ß√£o', 'dados', 'autoriza']},
            'confirmation': {'weight': 5, 'score': 0, 'keywords': ['confirmando', 'confere', 'correto']},
            'listening': {'weight': 3, 'score': 3, 'keywords': []},  # Come√ßa com pontos, perde se repetir
            'knowledge': {'weight': 5, 'score': 0, 'keywords': ['franquia', 'vistoria', 'para-brisa', 'seguro']},
            'damage_info': {'weight': 10, 'score': 0, 'keywords': ['quando', 'como', 'tamanho', 'local']},
            'city_store': {'weight': 10, 'score': 0, 'keywords': ['cidade', 'loja', 'unidade']},
            'communication': {'weight': 5, 'score': 0, 'keywords': ['posso ajudar', 'aguarde', 'momento']},
            'empathy': {'weight': 4, 'score': 0, 'keywords': ['entendo', 'compreendo', 'vamos resolver']},
            'closing': {'weight': 15, 'score': 0, 'keywords': ['protocolo', 'validade', 'franquia', 'link']},
            'satisfaction': {'weight': 6, 'score': 0, 'keywords': ['pesquisa', 'satisfa√ß√£o', 'avalia√ß√£o']}
        }
        self.penalties = 0
        
    def evaluate(self, message: str, is_repetition: bool = False) -> Dict:
        """Avalia mensagem do agente"""
        message_lower = message.lower()
        results = {}
        
        # Penaliza repeti√ß√µes
        if is_repetition:
            self.criteria['listening']['score'] = max(0, self.criteria['listening']['score'] - 1)
            self.penalties += 5
        
        # Avalia cada crit√©rio
        for key, criterion in self.criteria.items():
            if key == 'listening':
                continue  # J√° tratado acima
                
            found = [kw for kw in criterion['keywords'] if kw in message_lower]
            if found:
                # Pontua√ß√£o parcial baseada na quantidade de keywords
                score_ratio = min(1.0, len(found) / max(1, len(criterion['keywords'])))
                earned = int(criterion['weight'] * score_ratio)
                criterion['score'] = max(criterion['score'], earned)
                results[key] = {'earned': earned, 'max': criterion['weight'], 'evidence': found}
        
        return results
    
    def get_total_score(self) -> Tuple[int, int]:
        """Retorna pontua√ß√£o total"""
        total = sum(c['score'] for c in self.criteria.values()) - self.penalties
        max_score = sum(c['weight'] for c in self.criteria.values())
        return max(0, total), max_score
    
    def get_report(self) -> List[Dict]:
        """Gera relat√≥rio detalhado"""
        report = []
        for key, criterion in self.criteria.items():
            report.append({
                'name': key.replace('_', ' ').title(),
                'score': criterion['score'],
                'max': criterion['weight'],
                'percentage': (criterion['score'] / criterion['weight'] * 100) if criterion['weight'] > 0 else 0
            })
        return sorted(report, key=lambda x: x['percentage'])

# ==================== INTERFACE PRINCIPAL ====================

def init_session_state():
    """Inicializa estado da sess√£o"""
    if 'active' not in st.session_state:
        st.session_state.active = False
        st.session_state.messages = []
        st.session_state.customer = SmartVirtualCustomer()
        st.session_state.evaluator = IntelligentEvaluator()
        st.session_state.start_time = None
        st.session_state.message_count = 0

def main():
    init_session_state()
    
    # Header compacto
    st.markdown("""
    <div class="main-header">
        <h2>üéØ Voice Coach Pro - Carglass</h2>
        <p style="margin: 0;">Sistema Inteligente de Treinamento</p>
    </div>
    """, unsafe_allow_html=True)
    
    if not st.session_state.active:
        # Tela inicial
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("""
            ### üìã Protocolo de Atendimento
            
            **Objetivo:** Seguir o checklist Carglass (81 pontos)
            
            **Principais Itens:**
            1. Sauda√ß√£o profissional com nome
            2. Coletar todos os dados (nome, CPF, 2 telefones, placa, endere√ßo)
            3. Confirmar informa√ß√µes (ECO)
            4. Demonstrar empatia
            5. Script de encerramento completo
            
            **‚ö†Ô∏è Aten√ß√£o:** O cliente ficar√° impaciente se voc√™ repetir perguntas!
            """)
            
            if st.button("üöÄ Iniciar Simula√ß√£o", type="primary", use_container_width=True):
                st.session_state.active = True
                st.session_state.start_time = time.time()
                st.session_state.messages = [("cliente", "Al√¥? Preciso de ajuda com meu carro!")]
                st.rerun()
    
    else:
        # Interface de simula√ß√£o ativa
        # Layout em 3 colunas: chat (2/3) e controles (1/3)
        col_chat, col_controls = st.columns([2, 1])
        
        with col_chat:
            # Timer
            if st.session_state.start_time:
                elapsed = int(time.time() - st.session_state.start_time)
                minutes = elapsed // 60
                seconds = elapsed % 60
                st.markdown(f'<div class="timer-display">‚è±Ô∏è Tempo: {minutes:02d}:{seconds:02d}</div>', 
                          unsafe_allow_html=True)
            
            # Container de chat com altura fixa
            chat_html = '<div class="chat-container">'
            for speaker, message in st.session_state.messages:
                if speaker == "cliente":
                    chat_html += f'<div class="message customer-message">üî∏ <strong>Cliente:</strong> {message}</div>'
                else:
                    chat_html += f'<div class="message agent-message"><strong>Voc√™:</strong> {message} üîπ</div>'
            chat_html += '</div>'
            
            st.markdown(chat_html, unsafe_allow_html=True)
            
            # √Årea de input
            st.markdown('<div class="input-area">', unsafe_allow_html=True)
            
            user_input = st.text_area(
                "Sua resposta:",
                height=80,
                placeholder="Digite aqui sua resposta ao cliente...",
                key=f"input_{st.session_state.message_count}"
            )
            
            col_send, col_end = st.columns(2)
            with col_send:
                if st.button("üì§ Enviar", type="primary", use_container_width=True, disabled=not user_input):
                    # Adiciona mensagem do agente
                    st.session_state.messages.append(("agente", user_input))
                    
                    # Verifica se √© repeti√ß√£o
                    is_repetition = st.session_state.customer.memory.repetition_count > 0
                    
                    # Avalia
                    st.session_state.evaluator.evaluate(user_input, is_repetition)
                    
                    # Gera resposta do cliente
                    customer_response = st.session_state.customer.generate_response(user_input)
                    st.session_state.messages.append(("cliente", customer_response))
                    
                    st.session_state.message_count += 1
                    st.rerun()
            
            with col_end:
                if st.button("üèÅ Finalizar", type="secondary", use_container_width=True):
                    st.session_state.active = False
                    st.rerun()
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col_controls:
            # M√©tricas em tempo real
            st.markdown('<div class="metrics-container">', unsafe_allow_html=True)
            st.markdown("### üìä M√©tricas")
            
            total, max_score = st.session_state.evaluator.get_total_score()
            percentage = (total / max_score * 100) if max_score > 0 else 0
            
            # Indicador de performance
            if percentage >= 80:
                badge_class = "badge-success"
                status = "Excelente"
            elif percentage >= 60:
                badge_class = "badge-warning"
                status = "Bom"
            else:
                badge_class = "badge-danger"
                status = "Melhorar"
            
            st.markdown(f'<div class="metric-card">'
                       f'<strong>Pontua√ß√£o</strong><br>'
                       f'{total}/{max_score} pontos<br>'
                       f'<span class="status-badge {badge_class}">{percentage:.0f}% - {status}</span>'
                       f'</div>', unsafe_allow_html=True)
            
            # Estado do cliente
            patience = st.session_state.customer.memory.patience_level
            if patience > 70:
                patience_status = "üòä Satisfeito"
                patience_color = "badge-success"
            elif patience > 40:
                patience_status = "üòê Neutro"
                patience_color = "badge-warning"
            else:
                patience_status = "üò§ Impaciente"
                patience_color = "badge-danger"
            
            st.markdown(f'<div class="metric-card">'
                       f'<strong>Cliente</strong><br>'
                       f'<span class="status-badge {patience_color}">{patience_status}</span><br>'
                       f'Paci√™ncia: {patience}%'
                       f'</div>', unsafe_allow_html=True)
            
            # Dados coletados
            st.markdown("### üìã Checklist")
            memory = st.session_state.customer.memory.provided_data
            
            checklist_items = [
                ('Nome', 'name' in memory),
                ('CPF', 'cpf' in memory),
                ('Telefone 1', 'phone1' in memory),
                ('Telefone 2', 'phone2' in memory),
                ('Placa', 'plate' in memory),
                ('Endere√ßo', 'address' in memory),
                ('Problema', 'problem' in memory)
            ]
            
            for item, collected in checklist_items:
                icon = "‚úÖ" if collected else "‚è≥"
                st.write(f"{icon} {item}")
            
            # Avisos
            if st.session_state.customer.memory.repetition_count > 0:
                st.warning(f"‚ö†Ô∏è {st.session_state.customer.memory.repetition_count} repeti√ß√µes detectadas!")
            
            st.markdown('</div>', unsafe_allow_html=True)
    
    # Relat√≥rio final (quando n√£o est√° ativo mas tem mensagens)
    if not st.session_state.active and len(st.session_state.messages) > 0:
        st.markdown("---")
        st.markdown("## üìä Relat√≥rio Final")
        
        total, max_score = st.session_state.evaluator.get_total_score()
        percentage = (total / max_score * 100) if max_score > 0 else 0
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Pontua√ß√£o Final", f"{total}/{max_score}")
        with col2:
            st.metric("Percentual", f"{percentage:.1f}%")
        with col3:
            result = "‚úÖ APROVADO" if percentage >= 80 else "‚ö†Ô∏è MELHORAR"
            st.metric("Resultado", result)
        with col4:
            if st.session_state.start_time:
                duration = int(time.time() - st.session_state.start_time)
                st.metric("Dura√ß√£o", f"{duration//60:02d}:{duration%60:02d}")
        
        # Detalhamento por crit√©rio
        with st.expander("üìã Detalhamento por Crit√©rio"):
            report = st.session_state.evaluator.get_report()
            for item in report:
                status = "‚úÖ" if item['percentage'] >= 80 else "‚ö†Ô∏è" if item['percentage'] >= 50 else "‚ùå"
                st.write(f"{status} **{item['name']}**: {item['score']}/{item['max']} ({item['percentage']:.0f}%)")
        
        # Feedback do cliente
        st.markdown("### üí¨ Feedback do Cliente Virtual")
        patience = st.session_state.customer.memory.patience_level
        repetitions = st.session_state.customer.memory.repetition_count
        
        if repetitions > 2:
            st.error(f"‚ùå Cliente ficou frustrado com {repetitions} repeti√ß√µes desnecess√°rias")
        elif patience < 40:
            st.warning("‚ö†Ô∏è Cliente demonstrou impaci√™ncia durante o atendimento")
        elif percentage >= 80:
            st.success("‚úÖ Cliente satisfeito com o atendimento!")
        
        # Reiniciar
        if st.button("üîÑ Nova Simula√ß√£o", type="primary", use_container_width=True):
            for key in st.session_state.keys():
                del st.session_state[key]
            st.rerun()

if __name__ == "__main__":
    main()
